import express from "express";
import http from "http";
import mongoose from "mongoose";
import cors from "cors";
import { Server } from "socket.io";
import dotenv from "dotenv";

dotenv.config();

const app = express();
const server = http.createServer(app);
const io = new Server(server, {
    cors: {
        origin: "*",
        methods: ["GET", "POST"],
    },
});

app.use(cors());
app.use(express.json());

// ✅ Debugging MongoDB Connection
mongoose
    .connect(process.env.MONGO_URI, {
        useNewUrlParser: true,
        useUnifiedTopology: true,
    })
    .then(() => console.log("✅ MongoDB Connected"))
    .catch((err) => console.error("❌ MongoDB Connection Error:", err));

const documentSchema = new mongoose.Schema({
    _id: String,
    content: String,
});

const Document = mongoose.model("Document", documentSchema);

const findOrCreateDocument = async (roomId) => {
    if (!roomId) return null;
    const doc = await Document.findById(roomId);
    if (doc) {
        console.log(`📂 Found existing document: ${roomId}`);
        return doc;
    }
    console.log(`📄 Creating new document: ${roomId}`);
    return await Document.create({ _id: roomId, content: "" });
};

io.on("connection", (socket) => {
    console.log("🔗 A user connected:", socket.id);

    socket.on("get-document", async (roomId) => {
        console.log(`📡 User requesting room: ${roomId}`);
        const document = await findOrCreateDocument(roomId);
        socket.join(roomId);
        socket.emit("load-document", document.content);
    });

    socket.on("send-changes", async (roomId, content) => {
        console.log(`✍️ Updating document: ${roomId}`);
        socket.broadcast.to(roomId).emit("receive-changes", content);
        await Document.findByIdAndUpdate(roomId, { content });
    });

    socket.on("disconnect", () => {
        console.log("❌ User disconnected:", socket.id);
    });
});

const PORT = process.env.PORT || 5000;
server.listen(PORT, () => console.log(`🚀 Server running on port ${PORT}`));
